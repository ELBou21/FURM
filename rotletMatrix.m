function [ A ] = rotletMatrix(trackerPts, forcingPts, epsilon, mu)
% Create the 3m x 3n regularized dipole matrix to calculate the velocity at m
% tracker points generated by forces at n forcing points

% trackerPts is a 3m x 1 vector of tracking point locations
% forcingPts is a 3n x 1 vector of forcing point locations
% epsilon is the spreading parameter (scalar)
% mu is the viscosity (scalar)

% Calculates the number of tracking and forcing points
m = length(trackerPts)/3;
n = length(forcingPts)/3;

% Initialize the matrix
A = zeros(3*m,3*n);

% loops through each combination of tracking points and forcing points
for p = 1:m
    for q=1:n
        
        %xhat is the difference between each pair of tracking point(s) and
        %forcing point(s)
        xhat = trackerPts(3*p-2:3*p)-forcingPts(3*q-2:3*q);
        r = norm(xhat);
        R = (r.^2  + epsilon.^2).^(1/2);
        rmatrix = zeros(3,3);
        
        %Building the matrix based on formulas
        for j = 1:3
            rmatrix(1, j) = -6*xhat(3).^2*epsilon.^2*(1==j)/R.^5;
            rmatrix(2, j) = -6*xhat(3).^2*epsilon.^2*(2==j)/R.^5;
            rmatrix(3, j) = -(6*xhat(3)*epsilon.^2/R.^5) * ((2==j)*xhat(2)+(1==j)*xhat(1));
        end
        rmatrix = (1/(8*pi*mu))*rmatrix;
        
        %Each forcing point vector is added, each tracking point vector is
        %concatenated
        A(3*p-2:3*p,3*q-2:3*q) = A(3*p-2:3*p,3*q-2:3*q) +rmatrix;
    end
end
end
